/**
 * @file    main.c
 * @brief   SPI Master Demo
 * @details Shows Master loopback demo for QSPI0
 *          Read the printf() for instructions
 */

/******************************************************************************
 * Copyright (C) 2023 Maxim Integrated Products, Inc., All Rights Reserved.
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included
 * in all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
 * OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
 * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
 * IN NO EVENT SHALL MAXIM INTEGRATED BE LIABLE FOR ANY CLAIM, DAMAGES
 * OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE,
 * ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
 * OTHER DEALINGS IN THE SOFTWARE.
 *
 * Except as contained in this notice, the name of Maxim Integrated
 * Products, Inc. shall not be used except as stated in the Maxim Integrated
 * Products, Inc. Branding Policy.
 *
 * The mere transfer of this software does not imply any licenses
 * of trade secrets, proprietary technology, copyrights, patents,
 * trademarks, maskwork rights, or any other form of intellectual
 * property whatsoever. Maxim Integrated Products, Inc. retains all
 * ownership rights.
 *
 ******************************************************************************/

/***** Includes *****/
#include <stdio.h>
#include <stdint.h>
#include <string.h>
#include "mxc_device.h"
#include "mxc_delay.h"
#include "mxc_pins.h"
#include "nvic_table.h"
#include "uart.h"
#include "spi.h"
#include "dma.h"

/***** Preprocessors *****/
#define MASTERSYNC 1
#define MASTERASYNC 0
#define MASTERDMA 0

#if (!(MASTERSYNC || MASTERASYNC || MASTERDMA))
#error "You must set either MASTERSYNC or MASTERASYNC or MASTERDMA to 1."
#endif
#if ((MASTERSYNC && MASTERASYNC) || (MASTERASYNC && MASTERDMA) || (MASTERDMA && MASTERSYNC))
#error "You must select either MASTERSYNC or MASTERASYNC or MASTERDMA, not all 3."
#endif

/***** Definitions *****/
#define DATA_LEN 1 // Words
#define DATA_VALUE 0xA5A5 // This is for master mode only...
#define VALUE 0xFFFF
#define SPI_SPEED 100000 // Bit Rate

#define SPI MXC_SPI0
#define SPI_IRQ SPI0_IRQn
#define CLR_PORT MXC_GPIO0
#define CLR_PIN MXC_GPIO_PIN_2
#define RCLK_PORT MXC_GPIO0
#define RCLK_PIN MXC_GPIO_PIN_3

/***** Globals *****/
uint16_t rx_data[DATA_LEN];
uint16_t tx_data[DATA_LEN];
volatile int SPI_FLAG;
volatile int DMA0_FLAG = 0;
volatile int DMA1_FLAG = 0;

/***** Functions *****/
void SPI0_IRQHandler(void)
{
    MXC_SPI_AsyncHandler(SPI);
}

void DMA0_Handler(void)
{
    MXC_DMA_Handler();
    DMA0_FLAG = 1;
}

void DMA1_Handler(void)
{
    MXC_DMA_Handler();
    DMA1_FLAG = 1;
}

void SPI_Callback(mxc_spi_req_t *req, int error)
{
    SPI_FLAG = error;
}
int SPI_MAX31723_Init()
{
    
    int retVal;
    retVal = MXC_SPI_Init(SPI, 1, 0, 1, 0, SPI_SPEED); // Changed SS polarity
    MXC_SPI_SetMode(SPI, SPI_MODE_0);
    MXC_SPI_SetDataSize(SPI, 8);
    MXC_SPI_SetWidth(SPI, SPI_WIDTH_STANDARD);
    printf("\nBruh\n");
    //retVal=SPI_MAX31723_Read_Reg(0x02); // Continuous measurement, 9-bit resolution

    return retVal;
}

void SPI_Write_ShiftReg(uint8_t w_data)
{
    uint8_t retVal;
    //reg |= WRITE_BIT;
    uint8_t tx_data[2] = {w_data,0x00};
    uint8_t rx_data[2] = {0x00,0x00};
    //printf("ola");
    mxc_spi_req_t req;
    //SPI Request
    req.spi = SPI;
    req.txData = (uint8_t *)tx_data;
    req.rxData = (uint8_t *)rx_data;
    req.txLen = DATA_LEN;
    req.rxLen = DATA_LEN;
    req.ssIdx = 0;
    req.ssDeassert = 1;
    req.txCnt = 0;
    req.rxCnt = 0;
    req.completeCB = (spi_complete_cb_t)SPI_Callback;
    //req.completeCB = NULL;
    SPI_FLAG = 1;
    

    retVal = MXC_SPI_MasterTransaction(&req);
    //MXC_Delay(MXC_DELAY_MSEC(20));
    if (retVal != E_NO_ERROR)
    {
        printf("Issue reading SPI peripheral: error %d", retVal);
    }
    return;
}

int main(void)
{
    int retVal;
    uint8_t regValMax3172[7] = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
    uint8_t testbyte=8;
    float tempFloat;
    mxc_gpio_cfg_t gpio_out;
    mxc_gpio_cfg_t gpio_out2;
    printf("\n**************************** SPI MASTER TEST ***********************\n");
    printf("This example configures the SPI to send data between the MAX32670EVKIT\n");
    printf("and the MAX31723PMB1 board.\n");
    

    // Configure the peripheral
    retVal = SPI_MAX31723_Init();
   
    if (retVal != E_NO_ERROR) {
        printf("\nSPI INITIALIZATION ERROR\n");
        return retVal;
    }
    //RCLk pin
    gpio_out.port = RCLK_PORT;
    gpio_out.mask = RCLK_PIN;
    gpio_out.pad = MXC_GPIO_PAD_NONE;
    gpio_out.func = MXC_GPIO_FUNC_OUT;
    gpio_out.vssel = MXC_GPIO_VSSEL_VDDIO;
    gpio_out.drvstr = MXC_GPIO_DRVSTR_0;
    MXC_GPIO_Config(&gpio_out);

    //clr PIN
    gpio_out2.port = CLR_PORT;
    gpio_out2.mask = CLR_PIN;
    gpio_out2.pad = MXC_GPIO_PAD_NONE;
    gpio_out2.func = MXC_GPIO_FUNC_OUT;
    gpio_out2.vssel = MXC_GPIO_VSSEL_VDDIO;
    gpio_out2.drvstr = MXC_GPIO_DRVSTR_0;
    MXC_GPIO_Config(&gpio_out2);
    
    while(1) {
        for(uint8_t i = 1; i < 255; i++){
            //turn off clr pin
            MXC_GPIO_OutToggle(gpio_out2.port,gpio_out2.mask);
            MXC_Delay(MXC_DELAY_MSEC(5));
            //send data via spi
            SPI_Write_ShiftReg(i);
            MXC_Delay(MXC_DELAY_MSEC(10));
            //set latch high
            MXC_GPIO_OutToggle(gpio_out.port,gpio_out.mask);
            MXC_Delay(MXC_DELAY_MSEC(100));
            //set latch low
            MXC_GPIO_OutClr(gpio_out.port,gpio_out.mask);
            MXC_Delay(MXC_DELAY_MSEC(5));
            //set clear high clear output
            MXC_GPIO_OutClr(gpio_out2.port,gpio_out2.mask);
            MXC_Delay(MXC_DELAY_MSEC(5));
            printf("\nHELLO %d", i);
        }
        
    }

    // SPI Shutdown (error-checking with retVal)
    retVal = MXC_SPI_Shutdown(SPI);
    if (retVal != E_NO_ERROR) {
        printf("\n-->SPI SHUTDOWN ERROR: %i\n", retVal);
        return retVal;
    }

}
